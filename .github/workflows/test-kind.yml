name: GitOps Duel CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CLUSTER_NAME: kind

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          wait: 120s

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Install Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash
          flux --version

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
          argocd version --client

      - name: Verify cluster connectivity
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Save kubeconfig
        id: kubeconfig
        run: |
          mkdir -p ~/.kube
          kind export kubeconfig --name ${{ env.CLUSTER_NAME }}
          echo "kubeconfig=$(cat ~/.kube/config | base64 -w 0)" >> "$GITHUB_OUTPUT"

      - name: Terraform Init
        working-directory: .
        run: terraform init

      - name: Terraform Apply - Core Components (ArgoCD & Flux)
        working-directory: .
        run: |
          terraform apply -target=module.argocd.kubernetes_namespace.argocd -auto-approve
          terraform apply -target=module.argocd.helm_release.argocd -auto-approve
          echo "‚è≥ Waiting for ArgoCD CRDs to be ready..."
          kubectl wait --for=condition=Established crd/applications.argoproj.io --timeout=120s
          terraform apply -target=module.argocd.kubernetes_manifest.argocd_nginx_app -auto-approve
          terraform apply -target=module.argocd.kubernetes_manifest.argocd_helm_nginx_app -auto-approve
          terraform apply -auto-approve

      - name: Wait for ArgoCD server
        run: |
          kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout=600s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

      - name: Verify ArgoCD
        run: |
          echo "ArgoCD Resources:"
          kubectl get all -n argocd
          echo "ArgoCD Applications:"
          kubectl get applications -n argocd || echo "No applications found yet"

      - name: Verify FluxCD
        run: |
          echo "Flux Resources:"
          flux get all -A
          kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=300s || echo "Flux may still be starting"

  build-and-deploy-ui:
    runs-on: ubuntu-latest
    needs: setup-and-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          wait: 30s

      - name: Restore kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ needs.setup-and-deploy.outputs.kubeconfig }}" | base64 -d > ~/.kube/config
          kubectl cluster-info

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push UI Backend
        run: |
          echo "Building UI Backend..."
          docker build -t justrunme/gitops-duel-ui-backend:latest ./ui-backend
          docker push justrunme/gitops-duel-ui-backend:latest

      - name: Build and push UI Frontend
        run: |
          echo "Building UI Frontend..."
          docker build -t justrunme/gitops-duel-ui-frontend:latest ./ui-frontend
          docker push justrunme/gitops-duel-ui-frontend:latest

      - name: Deploy UI
        run: |
          echo "Deploying UI components..."
          kubectl apply -f kubernetes/ui/
          echo "Waiting for UI deployments..."
          kubectl wait --for=condition=available deployment/ui-backend -n default --timeout=300s || echo "UI Backend deployment may still be starting"
          kubectl wait --for=condition=available deployment/ui-frontend -n default --timeout=300s || echo "UI Frontend deployment may still be starting"

  simulate-errors:
    runs-on: ubuntu-latest
    needs: [setup-and-deploy, build-and-deploy-ui]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          wait: 30s

      - name: Restore kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ needs.setup-and-deploy.outputs.kubeconfig }}" | base64 -d > ~/.kube/config
          kubectl cluster-info

      - name: Simulate ArgoCD Deployment Issues
        run: |
          echo "Simulating ArgoCD deployment issues..."
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ deployment –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
          if kubectl get deployment nginx-app -n default &>/dev/null; then
            kubectl delete deployment nginx-app -n default
            echo "Deleted nginx-app deployment, waiting for ArgoCD to recover..."
            sleep 30
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ArgoCD (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            kubectl wait --for=condition=available deployment/nginx-app -n default --timeout=300s || echo "ArgoCD recovery test completed (may need more time)"
          else
            echo "nginx-app deployment not found, skipping ArgoCD recovery test"
          fi

      - name: Simulate Flux Deployment Issues  
        run: |
          echo "Simulating Flux deployment issues..."
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ deployment –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          if kubectl get deployment nginx-app -n default &>/dev/null; then
            kubectl scale deployment nginx-app --replicas=0 -n default
            echo "Scaled nginx-app to 0 replicas, waiting for Flux to recover..."
            sleep 30
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Flux
            kubectl wait --for=condition=available deployment/nginx-app -n default --timeout=300s || echo "Flux recovery test completed (may need more time)"
          else
            echo "nginx-app deployment not found, skipping Flux recovery test"
          fi

      - name: Check cluster state after simulations
        run: |
          echo "=== Cluster State After Simulations ==="
          echo "ArgoCD Status:"
          kubectl get all -n argocd
          echo ""
          echo "Flux Status:"
          kubectl get all -n flux-system
          echo ""
          echo "Default Namespace:"
          kubectl get all -n default

  output-access-info:
    runs-on: ubuntu-latest
    needs: [setup-and-deploy, simulate-errors]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          wait: 30s

      - name: Restore kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ needs.setup-and-deploy.outputs.kubeconfig }}" | base64 -d > ~/.kube/config
          kubectl cluster-info

      - name: Get Access Information
        id: access_info
        run: |
          echo "Retrieving access information..."
          # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
          if kubectl get secret argocd-initial-admin-secret -n argocd &>/dev/null; then
            ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
            echo "ARGOCD_PASSWORD=${ARGOCD_PASSWORD}" >> "$GITHUB_OUTPUT"
          else
            echo "ARGOCD_PASSWORD=admin" >> "$GITHUB_OUTPUT"
            echo "Warning: ArgoCD initial admin secret not found, using default password"
          fi

      - name: Output Access Information
        run: |
          echo "========================================"
          echo "           Access Information           "
          echo "========================================"
          echo ""
          echo "üåê To access UI Dashboard:"
          echo "1. Run: kubectl port-forward service/ui-frontend 8082:80 -n default"
          echo "2. Open: http://localhost:8082"
          echo ""
          echo "üîß To access ArgoCD UI:"
          echo "1. Run: kubectl port-forward svc/argocd-server -n argocd 8080:80"
          echo "2. Open: http://localhost:8080"
          echo "3. Login with:"
          echo "   Username: admin"
          echo "   Password: ${{ steps.access_info.outputs.ARGOCD_PASSWORD }}"
          echo ""
          echo "üìä To access Flux information:"
          echo "1. Run: flux get all -A"
          echo ""
          echo "üîç Cluster Information:"
          echo "   Cluster Name: ${{ env.CLUSTER_NAME }}"
          echo "   Context: kind-${{ env.CLUSTER_NAME }}"
          echo "========================================"

      - name: Final Cluster Status
        if: always()
        run: |
          echo "=== Final Cluster Status ==="
          echo "Nodes:"
          kubectl get nodes
          echo ""
          echo "All Pods:"
          kubectl get pods -A
          echo ""
          echo "Services:"
          kubectl get svc -A