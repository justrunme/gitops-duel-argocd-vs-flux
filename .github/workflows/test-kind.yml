name: GitOps Duel CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  setup-kind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Install Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash
          flux --version

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Terraform Init
        working-directory: .
        run: terraform init

  deploy-core-components:
    runs-on: ubuntu-latest
    needs: setup-kind
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Terraform Init
        working-directory: .
        run: terraform init

      - name: Terraform Apply - Core Components (ArgoCD & Flux)
        working-directory: .
        run: |
          terraform apply -target=module.argocd.kubernetes_namespace.argocd -auto-approve
          terraform apply -target=module.argocd.helm_release.argocd -auto-approve
          echo "⏳ Waiting for ArgoCD CRDs to be ready..."
          kubectl wait --for=condition=Established crd/applications.argoproj.io --timeout=60s
          terraform apply -target=module.argocd.kubernetes_manifest.argocd_nginx_app -auto-approve
          terraform apply -target=module.argocd.kubernetes_manifest.argocd_helm_nginx_app -auto-approve
          terraform apply -auto-approve

      - name: Wait for ArgoCD server
        run: kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout=360s

      - name: Verify ArgoCD
        run: |
          kubectl get all -n argocd
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

      - name: Verify FluxCD
        run: |
          flux get all -A
          kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=300s

  deploy-nginx-apps:
    runs-on: ubuntu-latest
    needs: deploy-core-components
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Terraform Init
        working-directory: .
        run: terraform init

      - name: Terraform Apply - Nginx Applications
        working-directory: .
        run: terraform apply -auto-approve

  build-and-deploy-ui:
    runs-on: ubuntu-latest
    needs: deploy-nginx-apps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push UI Backend
        run: |
          docker build -t justrunme/gitops-duel-ui-backend:latest ./ui-backend
          docker push justrunme/gitops-duel-ui-backend:latest

      - name: Build and push UI Frontend
        run: |
          docker build -t justrunme/gitops-duel-ui-frontend:latest ./ui-frontend
          docker push justrunme/gitops-duel-ui-frontend:latest

      - name: Deploy UI
        run: kubectl apply -f kubernetes/ui/

  simulate-errors:
    runs-on: ubuntu-latest
    needs: build-and-deploy-ui
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Terraform Init
        working-directory: .
        run: terraform init

      - name: Simulate ArgoCD Deployment Deletion
        run: |
          kubectl delete deployment nginx-helm-app -n default
          kubectl wait --for=condition=available deployment/nginx-helm-app -n default --timeout=300s

      - name: Simulate Flux Deployment Deletion
        run: |
          kubectl delete deployment nginx-helm-app -n default
          kubectl wait --for=condition=available deployment/nginx-helm-app -n default --timeout=300s

      - name: Simulate ArgoCD Replicas Scale
        run: |
          kubectl scale deployment nginx-helm-app --replicas=0 -n default
          kubectl wait --for=condition=available deployment/nginx-helm-app -n default --timeout=300s

      - name: Simulate Flux Replicas Scale
        run: |
          kubectl scale deployment nginx-helm-app --replicas=0 -n default
          kubectl wait --for=condition=available deployment/nginx-helm-app -n default --timeout=300s

  output-access-info:
    runs-on: ubuntu-latest
    needs: simulate-errors
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind

      - name: Get Grafana and ArgoCD Passwords
        id: access_info
        run: |
          GRAFANA_PASSWORD=$(kubectl --namespace monitoring get secrets monitoring-grafana -o jsonpath="{.data.admin-password}" | base64 -d)
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "GRAFANA_PASSWORD=${GRAFANA_PASSWORD}" >> "$GITHUB_OUTPUT"
          echo "ARGOCD_PASSWORD=${ARGOCD_PASSWORD}" >> "$GITHUB_OUTPUT"

      - name: Output Access Information
        run: |
          echo "========================================"
          echo "           Access Information           "
          echo "========================================"
          echo ""
          echo "To access Grafana Dashboard:"
          echo "1. Run 'kubectl --namespace monitoring port-forward svc/monitoring-grafana 3000:80' in your local terminal."
          echo "2. Open http://localhost:3000 in your browser."
          echo "3. Login with username: admin"
          echo "   Password: ${{ steps.access_info.outputs.GRAFANA_PASSWORD }}"
          echo ""
          echo "To access UI Dashboard:"
          echo "1. Run 'kubectl port-forward service/ui-frontend 8082:80 -n default'"
          echo "2. Open http://localhost:8082"
          echo ""
          echo "To access ArgoCD UI:"
          echo "1. Run 'kubectl port-forward svc/argocd-server -n argocd 8080:80'"
          echo "2. Open http://localhost:8080"
          echo "3. Login with username: admin"
          echo "   Password: ${{ steps.access_info.outputs.ARGOCD_PASSWORD }}"
          echo "========================================"

  destroy:
    runs-on: ubuntu-latest
    if: always()
    needs: output-access-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: .
        run: terraform init

      - name: Destroy Infrastructure
        working-directory: .
        run: terraform destroy -auto-approve