name: Test Infrastructure on KinD

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup KinD
      uses: helm/kind-action@v1.10.0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.x

    - name: Install Flux CLI
      run: |
        curl -s https://fluxcd.io/install.sh | sudo bash
        flux --version

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply - Step 1 (ArgoCD Helm and CRD wait)
      run: |
        time terraform apply -target=module.argocd.helm_release.argocd -auto-approve
        time terraform apply -target=module.argocd.null_resource.argocd_crds_ready -auto-approve

    - name: Terraform Apply - Step 2 (All other resources)
      run: time terraform apply -auto-approve

    - name: Wait for ArgoCD server to be available
      run: |
        kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout=360s

    - name: Run ArgoCD login in-cluster
      run: |
        kubectl apply -f .github/argocd-login-job.yaml
        kubectl wait --for=condition=complete --timeout=120s job/argocd-login-test -n argocd
        kubectl logs job/argocd-login-test -n argocd

    - name: Debug ArgoCD login Job logs
      if: always()
      run: |
        kubectl describe job argocd-login-test -n argocd || true
        kubectl get pods -n argocd -l job-name=argocd-login-test
        kubectl logs -n argocd -l job-name=argocd-login-test --tail=100 || true

    - name: Verify ArgoCD Installation
      run: |
        kubectl get all -n argocd
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

    - name: Verify FluxCD Installation
      run: |
        flux get all -A
        kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=300s
        kubectl wait --for=condition=ready pod -l app=kustomize-controller -n flux-system --timeout=300s

    - name: Verify Nginx Application (ArgoCD Kustomize)
      run: |
        kubectl get deployment nginx -n default
        kubectl get service nginx -n default
        kubectl wait --for=condition=available deployment/nginx -n default --timeout=300s

    - name: Verify ArgoCD Helm App
      run: |
        kubectl get deployment helm-nginx -n default
        kubectl wait --for=condition=available deployment/helm-nginx -n default --timeout=300s

    - name: Verify Nginx Application (ArgoCD Kustomize) is reachable
      run: |
        kubectl port-forward service/nginx 8080:80 -n default &
        sleep 10 # Give port-forward some time to establish
        curl -v http://localhost:8080

    - name: Verify FluxCD Helm App
      run: |
        flux get kustomizations -A
        kubectl get deployment helm-nginx -n flux-system
        kubectl wait --for=condition=available deployment/helm-nginx -n flux-system --timeout=300s

    - name: Verify Nginx Application (FluxCD Kustomize)
      run: |
        kubectl get deployment nginx -n flux-system
        kubectl get service nginx -n flux-system
        kubectl wait --for=condition=available deployment/nginx -n flux-system --timeout=300s

    - name: Verify Nginx Application (FluxCD Kustomize) is reachable
      run: |
        kubectl port-forward service/nginx 8081:80 -n flux-system &
        sleep 10 # Give port-forward some time to establish
        curl -v http://localhost:8081

    - name: Verify All Pods
      run: |
        kubectl get pods -n default
        kubectl get pods -n flux-system

    - name: Show all resources in argocd namespace
      run: kubectl get all -n argocd

    - name: Show all resources in flux-system namespace
      run: kubectl get all -n flux-system

    - name: Output port-forward logs
      if: always()
      run: cat port-forward.log || echo "No port-forward log found"

    - name: Get argocd-server service YAML
      if: always()
      run: kubectl get svc argocd-server -n argocd -o yaml

    - name: Get argocd-cm ConfigMap YAML
      if: always()
      run: kubectl get cm argocd-cm -n argocd -o yaml

    - name: Get argocd-server deployment logs
      if: always()
      run: kubectl logs deployment/argocd-server -n argocd
